#!/bin/bash
# kubesecrets - decode and patch Kubernetes secrets

set -o pipefail
set -e

VERSION="1.0.0"
SCRIPT_NAME=$(basename "$0")

# Verify dependencies
if [ -z "$(command -v jq)" ]; then
  echo "Application jq required to use this tool!"
  exit 1
fi
if [ -z "$(command -v kubectl)" ]; then
  echo "Application kubectl required to use this tool!"
  exit 1
fi
if [ -z "$(command -v base64)" ]; then
  echo "Application base64 required to use this tool!"
  exit 1
fi

# --- Shared defaults ---
APPEND=false
CONFIG=""
DRYRUN=false
ECHO=false
INTERACTIVE=false
KEY_NAME=""
NAMESPACE=""
NEW_VALUE=""
READ_FROM_STDIN=false
SECRET_NAME=""
VERBOSE=false
KUBE_CMD=(kubectl)

# --- Shared functions ---
error() {
  echo "ERROR: $1"
  exit 1
}

log() {
  if [ "$VERBOSE" = true ]; then
    echo "$1"
  fi
}

version_info() {
  echo "$SCRIPT_NAME version $VERSION"
  exit 0
}

# Function to print usage and exit
usage() {
  cat <<EOF
Usage: $SCRIPT_NAME -k KEY_NAME [-p | -i | -u NEW_VALUE] [-s SECRET_NAME]

kubectl macro utility to decode, display, and update Kubernetes secrets

  -c KUBECONFIG   Specify a KUBECONFIG to use for kubectl (optional)
  -k KEY_NAME     Specify the key name (required)
  -n NAMESPACE    Specify namespace (default current context) (optional)
  -s SECRET_NAME  Specify the secret name (see Environment Variables for defaults) (optional)

  Patch Options: (Only one of -p, -i, or -u may be selected)
  -i              Read the new value from stdin (optional)
  -p              Prompt for the new value (optional)
  -u NEW_VALUE    Specify the new value (optional)

  Utility Options:
  -d              Dry run mode. Will output command but not execute (optional)
  -h              Display this menu
  -v              Verbose mode
  -V              Version information

  Environment Variables:

  KUBESECRETS_DEFAULT_SECRET_NAME        if -s is not set, default to this name
  KUBESECRETS_NAMESPACE_SECRET_FALLBACK  if -s is not set AND default isn't set or has failed, will try to use a
                                         secret with the same name as the namespace
  KUBESECRETS_NAMESPACE_SECRET_SUFFIX    If falling back to namespace, will append this as a suffix to the secret
                                         e.g. KUBESECRETS_NAMESPACE_SECRET_SUFFIX="_conn_info" kubesecrets -n default
                                         would search for "default_conn_info"
a secret named the same as the NAMESPACE
EOF
  exit 1
}

parse_options() {
  # Process command line options
  while getopts ":ac:dehik:n:ps:u:vV" opt; do
    case $opt in
      a) APPEND=true ;;
      d) DRYRUN=true ;;
      e) ECHO=true;;
      h) usage ;;
      i) READ_FROM_STDIN=true ;;
      k) KEY_NAME="$OPTARG" ;;
      n) NAMESPACE="$OPTARG" ;;
      p) INTERACTIVE=true ;;
      s) SECRET_NAME="$OPTARG" ;;
      u) NEW_VALUE="$OPTARG" ;;
      v) VERBOSE=true ;;
      V) version_info ;;
      c) CONFIG="$OPTARG" ;;
      *)
        echo "Invalid option: -$OPTARG" >&2
        usage
        ;;
    esac
  done
}

check_secret() {
    local namespace="$1"
    local secret_name="$2"

    log "check_secret -n $namespace -s $secret_name"
    "${KUBE_CMD[@]}" -n "$namespace" get secret "$secret_name" > /dev/null 2>&1
    local secret_exists=$?
    log "    returned $secret_exists"

    return "$secret_exists"
}

# Checks if a key exists in a secret within the specified namespace.
# Returns 0 if the key exists, non-zero otherwise.
check_secret_key() {
    local namespace="$1"
    local secret_name="$2"
    local key_name="$3"

    log "    checking Secret Key: $namespace, $secret_name, $key_name"
    "${KUBE_CMD[@]}" -n "$namespace" get secret "$secret_name" -o json 2> /dev/null | \
      jq --arg key "$key_name" -re '.data | if has($key) then true else false end' > /dev/null 2>&1
    local key_exists=$?
    log "    returned $key_exists"

    return "$key_exists"
}

decode_secrets() {
    local namespace="$1"
    local secret_name="$2"
    local key_name="$3"

    local found=false

    while IFS=$'\t' read -r KEY VALUE
    do
        if [ -z "$key_name" ] || [ "$key_name" == "$KEY" ]; then
            found=true
            DECODED=$(printf "%s" "$VALUE" | base64 --decode)
            printf "%s: %s\n" "${KEY}" "${DECODED}"
        fi
    done < <("${KUBE_CMD[@]}" -n "$namespace" get secrets "$secret_name" -o json | jq -r '.data | to_entries[] | "\(.key)\t\(.value)"')
    if [ -n "$key_name" ] && [ ! $found ] ; then
      error "Unabled to locate key ${key_name} in secret ${secret_name}"
    fi
}

resolve_namespace() {
  echo "$("${KUBE_CMD[@]}" config view --minify -o jsonpath='{..namespace}')"
}

resolve_secret_name() {
  local ns="$1"

  log "  Secret Name not specified, attempting to auto-match"
  if [ -n "$KUBESECRETS_DEFAULT_SECRET_NAME" ]; then
    log "  Attempting $KUBESECRETS_DEFAULT_SECRET_NAME..."
    if check_secret "$ns" "$KUBESECRETS_DEFAULT_SECRET_NAME" ; then
      echo "$KUBESECRETS_DEFAULT_SECRET_NAME"
      return
    fi
  fi

  if [ "$KUBESECRETS_NAMESPACE_SECRET_FALLBACK" = true ]; then
    local nss="${ns}"
    if [ -n "$KUBESECRETS_NAMESPACE_SECRET_SUFFIX" ]; then
      nss="${ns}${KUBESECRETS_NAMESPACE_SECRET_SUFFIX}"
    fi
    log "  Attempting ${nss}..."
    if check_secret "$ns" "$nss"; then
      echo "${nss}"
      return
    fi
  fi

  echo "no secrets found"
  if [ -z "$KUBESECRETS_DEFAULT_SECRET_NAME" ] || [ -z "$KUBESECRETS_NAMESPACE_SECRET_FALLBACK" ]; then
    echo "   Warning: Set KUBESECRETS_DEFAULT_SECRET_NAME and/or KUBESECRETS_NAMESPACE_SECRET_FALLBACK environment variables to use auto-match"
  fi

  error "Unable to auto-match secret name. Please try again using -s to specify a secret name"
}

get_secret() {
  decode_secrets "$NAMESPACE" "$SECRET_NAME" "$KEY_NAME"
}

patch_secret() {
  [ -z "$KEY_NAME" ] && error "-k KEY_NAME is required for patch"

  local OP="replace"
  if ! check_secret_key "$NAMESPACE" "$SECRET_NAME" "$KEY_NAME"; then
    if [ "$APPEND" = true ]; then
      OP="add"
    else
      error "Key $KEY_NAME not found in secret $SECRET_NAME."
    fi
  fi

  # Determine value
  if [ -n "$NEW_VALUE" ]; then
    VALUE="$NEW_VALUE"
  elif [ "$READ_FROM_STDIN" = true ]; then
    read -r VALUE
  elif [ "$INTERACTIVE" = true ]; then
    read -r -s -p "Enter new value for $KEY_NAME: " VALUE
    echo
  else
    error "You must provide a new value with -u, -i, or -p"
  fi

  # Base64 encode the value
  ENCODED=$(printf "%s" "$VALUE" | base64)

  PATCH_PAYLOAD="[{\"op\":\"$OP\",\"path\":\"/data/$KEY_NAME\",\"value\":\"$ENCODED\"}]"
  CMD=("${KUBE_CMD[@]}" -n "$NAMESPACE" patch secret "$SECRET_NAME" --type=json -p "$PATCH_PAYLOAD")

  if [ "$DRYRUN" = true ]; then
    echo "[DRYRUN] ${CMD[*]}"
  else
    "${CMD[@]}"
    if "$ECHO" ; then
      decode_secrets "$NAMESPACE" "$SECRET_NAME" "$KEY_NAME"
      echo "---"
      decode_secrets "$NAMESPACE" "$SECRET_NAME"
    fi
  fi
}

# --- Entry Point ---
cmd="$1"
shift || true

# Detect command or default to get
if [[ "$cmd" != "get" && "$cmd" != "patch" && "$cmd" != "version" && "$cmd" != "help" ]]; then
  #echo "Naked cmd is |$cmd|"
  set -- "$cmd" "$@"
  cmd="get"
fi

parse_options "$@"
[ -n "$CONFIG" ] && KUBE_CMD+=(--kubeconfig="$CONFIG")

# Bootstrap namespace and secret
[ -z "$NAMESPACE" ] && NAMESPACE=$(resolve_namespace)
if [ -z "$SECRET_NAME" ]; then
  SECRET_NAME=$(resolve_secret_name "$NAMESPACE")
else
  check_secret "$NAMESPACE" "$SECRET_NAME" || error "Secret $SECRET_NAME not found in namespace $NAMESPACE"
fi

# Dispatch
case "$cmd" in
  get) get_secret ;;
  patch) patch_secret ;;
  version) version_info ;;
  help) usage ;;
  *) error "Unknown command: $cmd" ;;
esac