#!/bin/bash

set -o pipefail

VERSION="1.0.0"
DATE="2023-12-04"
SCRIPT_NAME=$(basename "$0")

# Verify dependencies
if [ -z $(which jq) ] ; then
  echo "Application jq required to use this tool!"
  exit 1
fi
if [ -z $(which kubectl) ] ; then
    echo "Application kubectl required to use this tool!"
    exit 1
fi

verbose_print() {
  if [ "$VERBOSE" = true ]; then
      echo "$1"
  fi
}

# Checks if a key exists in a secret within the specified namespace.
# Returns 0 if the key exists, non-zero otherwise.
check_secret_key() {
  local namespace="$1"
  local secret_name="$2"
  local key_name="$3"

  verbose_print "    checking Secret Key: $namespace, $secret_name, $key_name"
  kubectl -n "$namespace" get secret "$secret_name" -o json 2> /dev/null | \
    jq --arg key "$key_name" -re '.data | if has($key) then true else false end' > /dev/null 2>&1
  local key_exists=$?
  verbose_print "    returned $key_exists"

  return "$key_exists"
}

# Function to print usage and exit
usage() {
  echo "Usage: $SCRIPT_NAME -k KEY_NAME [-p | -i | -u NEW_VALUE] [-s SECRET_NAME]"
  echo
  echo "kubectl macro utility to update a specific key within an existing secret."
  echo "Does NOT add keys or secrets, only updates an existing key"
  echo
  echo "  -i              Read the new value from stdin (optional)"
  echo "  -k KEY_NAME     Specify the key name (required)"
  echo "  -n NAMESPACE    Specify namespace (default current context) (optional)"
  echo "  -p              Prompt for the new value (optional)"
  echo "  -s SECRET_NAME  Specify the secret name (see Environment Variables for defaults) (optional)"
  echo "  -u NEW_VALUE    Specify the new value (optional)"
  echo
  echo "  One of -p, -i, or -u must be selected."
  echo
  echo "  Utility Options:"
  echo "  -d              Dry run mode. Will output command but not execute (optional)"
  echo "  -h              Display this menu"
  echo "  -v              Verbose mode"
  echo "  -V              Version information"
  echo
  echo "  Not Yet Implemented Options:"
  echo "  -c KUBECONFIG   Specify a KUBECONFIG to use for kubectl (optional)" 
  echo
  echo "  Environment Variables:"
  echo
  echo "  KUBESECRETS_DEFAULT_SECRET_NAME        if -s is not set, default to this name"
  echo "  KUBESECRETS_NAMESPACE_SECRET_FALLBACK  if -s is not set AND default isn't set or has failed, try using \
a secret named the same as the NAMESPACE"
  exit 1
}

handle_todo() {
  local failed_opt=$1
  echo "Option -$failed_opt has not yet been implemented"
  exit 1
}

version_info() {
  echo "$SCRIPT_NAME Version $VERSION - $DATE"
  exit 0
}

# Default values
INTERACTIVE=false
READ_FROM_STDIN=false
DRYRUN=false
VERBOSE=false

# Process command line options
while getopts ":c:dhik:n:ps:u:vV" opt; do
  case $opt in
    d)
      DRYRUN=true
      ;;
    h)
      usage
      ;;
    i) 
      READ_FROM_STDIN=true
      ;;
    k)
      KEY_NAME="$OPTARG"
      ;;
    n)
      NAMESPACE="$OPTARG"
      ;;
    p)
      INTERACTIVE=true
      ;;
    s)
      SECRET_NAME="$OPTARG"
      ;;
    u)
      NEW_VALUE="$OPTARG"
      ;;
    v)
      VERBOSE=true
      ;;
    V)
      version_info
      ;;

    c)
      handle_todo "$opt"
      ;;

    \?)
      echo "Invalid option: -$OPTARG" >&2
      usage
      ;;
  esac
done

if [ -z "$KEY_NAME" ] ; then
    echo "Error: option -k SECRET_NAME is required"
    exit 1
fi

if [ -z "$NAMESPACE" ] ; then
    NAMESPACE=$(kubectl config view --minify -o jsonpath='{..namespace}')
fi

if [ -z "$SECRET_NAME" ] ; then
    echo "  Secret Name not specified, attempting to auto-match"
    if [ "${KUBESECRETS_DEFAULT_SECRET_NAME-}" != "" ]; then
        echo "  Attempting $KUBESECRETS_DEFAULT_SECRET_NAME..."
        if check_secret_key "$NAMESPACE" "$KUBESECRETS_DEFAULT_SECRET_NAME" "$KEY_NAME"; then
            SECRET_NAME="$KUBESECRETS_DEFAULT_SECRET_NAME"
        fi
    fi
    if [ -z "$SECRET_NAME" ] && [ "${KUBESECRETS_NAMESPACE_SECRET_FALLBACK-}" = true ]; then
        echo "  Attempting $NAMESPACE..."
        if check_secret_key "$NAMESPACE" "$NAMESPACE" "$KEY_NAME"; then
            SECRET_NAME="$NAMESPACE"
        fi
    fi
    if [ -z "$SECRET_NAME" ]; then
        echo "   Error: Unable to auto-match secret name. Please try again using -s to specify a secret name"
        if [ -z "$KUBESECRETS_DEFAULT_SECRET_NAME" ] || [ -z "$KUBESECRETS_NAMESPACE_SECRET_FALLBACK" ]; then
            echo "   Warning: Set KUBESECRETS_DEFAULT_SECRET_NAME and/or KUBESECRETS_NAMESPACE_SECRET_FALLBACK \
environment variables to use auto-match"
        fi
        exit 1
    fi
else
    # Check if the key exists in the secret
    if ! check_secret_key "$NAMESPACE" "$SECRET_NAME" "$KEY_NAME"; then
        echo "Warning: Key $KEY_NAME not found in secret $SECRET_NAME."
        exit 1
    fi
fi

# Prompt for the new value if not provided through stdin
if [ -z "$NEW_VALUE" ] ; then
  if [ "$READ_FROM_STDIN" = true ]; then
    read -r -p "Enter the new value for $KEY_NAME: " NEW_VALUE
  elif [ "$INTERACTIVE" = true ]; then
    read -r -s -p "Enter the new value for $KEY_NAME: " NEW_VALUE
    echo
  else
    echo "Error: Missing new value. Use -i, -p, or -u NEW_VALUE"
    exit 1
  fi
  if [ -z "$NEW_VALUE" ] || [ "$NEW_VALUE" = "" ]; then
      echo "Error: You must enter a new value when using -i or -p, received nothing"
      exit 1
  fi
fi

#Add a blank line for cleanliness
echo

# Update the secret
if [ "$DRYRUN" = true ]; then
  printf "# Command to execute the patch:\n"
  printf "\t kubectl -n \"$NAMESPACE\" patch secret \"$SECRET_NAME\" --type=json -p '[{\"op\": \"replace\", \"path\": \"/data/$KEY_NAME\", \"value\": \"'\$(echo -n \"$NEW_VALUE\" | base64 )'\"}]'\n"
else
  kubectl -n "$NAMESPACE" patch secret "$SECRET_NAME" --type=json -p '[{"op": "replace", "path": "/data/'"$KEY_NAME"'", "value": "'$(echo -n "$NEW_VALUE" | base64)'"}]'
fi
